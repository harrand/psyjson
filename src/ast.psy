ast_type ::= enum
{
	.string_literal := 0;
	.numeric_literal := 1;
	.bool_literal := 2;
	.null_literal := 3;
	.array := 4;
	.object := 5;
};

ast ::= struct
{
	type : ast_type;
	number : u64;
	boolean : bool;
	chars : u8?;
	chars_len : u64;

	children : v0?;
	childcap : u64;
	childcount : u64;
};

ast_add_child ::= func(n : ast mut?, c : ast, a : arena mut? -> ast mut?)
{
	if(n->children == zero)
	{
		n->childcap = 8;
		n->children = arena_alloc(a, __sizeof(ast) * (n->childcap));
	}
	while(n->childcount >= (n->childcap))
	{
		oldcap ::= n->childcap;
		olddata ::= n->children;
		n->childcap = (n->childcap * 2);
		n->children = arena_alloc(a, __sizeof(ast) * (n->childcap));
		memcopy(n->children, olddata, __sizeof(ast) * oldcap);
	}
	ptr ::= (n->children)@ast mut? mut;
	ptr = (ptr#(n->childcount));
	n->childcount = (n->childcount + 1);
	deref(ptr) = c;
	return ptr;
};
